# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  ...
}:

let
  persistent = "/nix/persistent";
  nvme0n1p6 = "/dev/disk/by-uuid/23a8c46d-b26f-4d98-bedd-d659b0c25413";
  swapfile = "/swap/swapfile";
in
{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "ahci"
    "nvme"
    "usbhid"
    "usb_storage"
    "sd_mod"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "tmpfs";
    fsType = "tmpfs";
    options = [
      "relatime"
      "mode=755"
    ];
  };

  fileSystems.${persistent} = {
    device = nvme0n1p6;
    fsType = "btrfs";
    neededForBoot = true;
    options = [
      "subvol=@nixos"
      "compress=zstd"
    ];
  };

  fileSystems."/nix" =
    #  { device = "/dev/disk/by-uuid/23a8c46d-b26f-4d98-bedd-d659b0c25413";
    #    fsType = "btrfs";
    #    options = [ "subvol=@nix" "compress=zstd" "noatime" ];
    #  };

    {
      device = "/dev/disk/by-uuid/99049b36-481b-42a6-abc8-a77008840a18";
      #  { device = "/dev/disk/by-uuid/ac1b57a3-e188-49ec-9cd7-0ecdf5dd77ed";
      fsType = "bcachefs";
    };

  fileSystems."/gnu" = {
    device = nvme0n1p6;
    fsType = "btrfs";
    options = [
      "subvol=@gnu"
      "compress=zstd"
      "noatime"
    ];
  };

  fileSystems."/home" = {
    device = nvme0n1p6;
    fsType = "btrfs";
    options = [
      "subvol=@home"
      "compress=zstd"
    ];
  };

  fileSystems."/var/log" = {
    device = nvme0n1p6;
    fsType = "btrfs";
    options = [
      "subvol=@log"
      "compress=zstd"
    ];
  };

  fileSystems."/var/cache" = {
    device = nvme0n1p6;
    fsType = "btrfs";
    options = [
      "subvol=@cache"
      "compress=zstd"
    ];
  };

  fileSystems."/swap" = {
    device = nvme0n1p6;
    fsType = "btrfs";
    options = [
      "subvol=@swap"
      "ro"
    ];
  };

  fileSystems."${swapfile}" = {
    depends = [ "/swap" ];
    device = swapfile;
    fsType = "none";
    options = [
      "bind"
      "rw"
    ];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/2C93-0F4A";
    fsType = "vfat";
  };

  fileSystems."/mnt/windows" = {
    device = "/dev/disk/by-uuid/DA0294B802949AD9";
    fsType = "ntfs";
  };

  fileSystems."/mnt/segate4t" = {
    device = "/dev/disk/by-uuid/3034D2CA34D29268";
    fsType = "ntfs";
  };

  fileSystems."/vol/games" = {
    device = "/dev/disk/by-uuid/c0e4678d-4925-43d4-95be-8e258c51ca08";
    fsType = "btrfs";
    options = [ "compress=zstd" ];
  };

  swapDevices = [ { device = swapfile; } ];

  environment.persistence.${persistent} = {
    hideMounts = true;

    directories = [
      "/etc/NetworkManager/system-connections"
      "/etc/ssh"
      "/root"
      "/var"
    ];

    files = [
      "/etc/machine-id"
    ];

    users.benny = { };
  };

  systemd.services.nix-daemon = {
    environment.TMPDIR = "/var/cache/nix"; # Where Nix Daemon evaluates derivation
    serviceConfig.CacheDirectory = "nix"; # Automatically create /var/cache/nix when Nix Daemon starts
  };

  # Forces root user use nix daemon
  environment.variables.NIX_REMOTE = "daemon";

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp4s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
